//
//  PullRequestRepoInteractor.swift
//  TopJavaRepositories
//
//  Created by Mauro Sasso Coletes on 14/09/19.
//  Copyright (c) 2019 MSC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
// This tag below is used to create the testable files from the Cuckoo pod
// CUCKOO_TESTABLE

import UIKit

protocol PullRequestRepoBusinessLogic {
    func getPullrequests()
    func numbeOfRows() -> Int
    func viewModelForIndex(index: Int) -> PullRequestRepo.ViewModel?
    func getTitle()
}

protocol PullRequestRepoDataStore {
    var owner: String? {get set}
    var name: String? {get set}
}

class PullRequestRepoInteractor: PullRequestRepoBusinessLogic, PullRequestRepoDataStore {

    var presenter: PullRequestRepoPresentationLogic?
    let worker: PullRequestRepoWorker
    var items: [PullRequest] = []
    var owner: String?
    var name: String?
    
    init(worker: PullRequestRepoWorker = PullRequestRepoWorker()) {
        self.worker = worker
    }
    func getPullrequests() {
        guard let owner = owner, let name = name else { return }
        presenter?.presentLoading()
        worker.getPullRequests(request: PullRequestRepo.Request(owner: owner, name: name), onSuccess: { (response) in
            self.items.append(contentsOf: response)
            self.presenter?.reloadTable()
            self.presenter?.hideLoading()
        }) { (error) in
            self.presenter?.hideLoading()
            switch error {
            case .requestFailed:
                self.presenter?.displayError(type: ListRepositories.errors.noInternet, tryAgainAction: nil)
            case .jsonParsingFailure, .responseUnsuccessful(statusCode: _):
                self.presenter?.displayError(type: ListRepositories.errors.tryAgain, tryAgainAction: self.getPullrequests)
            }
        }
    }
    func numbeOfRows() -> Int {
        return self.items.count
    }
    
    func viewModelForIndex(index: Int) -> PullRequestRepo.ViewModel? {
        guard index >= 0 && index < numbeOfRows() else { return nil }
        return presenter?.presentViewModelFromModel(pullRequest: items[index])
    }
    func getTitle() {
        guard let name = name else { return }
        presenter?.presentTitle(title: name)
    }
}
